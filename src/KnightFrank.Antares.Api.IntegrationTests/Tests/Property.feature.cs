// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace KnightFrank.Antares.Api.IntegrationTests.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AddUpdateAndViewPropertyFeature : Xunit.IClassFixture<AddUpdateAndViewPropertyFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Property.feature"
#line hidden
        
        public AddUpdateAndViewPropertyFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Add, update and view Property", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(AddUpdateAndViewPropertyFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Add, update and view Property")]
        [Xunit.TraitAttribute("Description", "Create property in DB")]
        public virtual void CreatePropertyInDB()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create property in DB", new string[] {
                        "ignore"});
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "Country",
                        "PropertyNumber",
                        "PropertyName",
                        "AddressLine1",
                        "AddressLine2",
                        "Postcode",
                        "Town",
                        "County"});
            table1.AddRow(new string[] {
                        "3",
                        "Flat",
                        "United Kingdom",
                        "1",
                        "Beautifull Flat",
                        "Lewis Cubit Square",
                        "King Cross",
                        "N1C",
                        "London",
                        "Greater London"});
#line 5
 testRunner.Given("User is adding a new property", ((string)(null)), table1, "Given ");
#line 8
 testRunner.When("User retrevies data from DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "Country",
                        "PropertyNumber",
                        "PropertyName",
                        "AddressLine1",
                        "AddressLine2",
                        "Postcode",
                        "Town",
                        "County"});
            table2.AddRow(new string[] {
                        "3",
                        "Flat",
                        "United Kingdom",
                        "1",
                        "Beautifull Flat",
                        "Lewis Cubit Square",
                        "King Cross",
                        "N1C",
                        "London",
                        "Greater London"});
#line 9
 testRunner.Then("the result should be same as", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Add, update and view Property")]
        [Xunit.TraitAttribute("Description", "Update property in DB")]
        public virtual void UpdatePropertyInDB()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update property in DB", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "Country",
                        "PropertyNumber",
                        "PropertyName",
                        "AddressLine1",
                        "AddressLine2",
                        "Postcode",
                        "Town",
                        "County"});
            table3.AddRow(new string[] {
                        "3",
                        "Flat",
                        "United Kingdom",
                        "1",
                        "Beautifull Flat",
                        "Lewis Cubit Square",
                        "King Cross",
                        "N1C",
                        "London",
                        "Greater London"});
#line 14
 testRunner.Given("Details of property are provided", ((string)(null)), table3, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "Country",
                        "PropertyNumber",
                        "PropertyName",
                        "AddressLine1",
                        "AddressLine2",
                        "Postcode",
                        "Town",
                        "County"});
            table4.AddRow(new string[] {
                        "3",
                        "Flat",
                        "United Kingdom",
                        "100",
                        "Gasstation Apartment",
                        "Lewis Cubit Square",
                        "King Cross",
                        "N1C",
                        "London",
                        "Greater London"});
#line 17
  testRunner.And("Users updates property", ((string)(null)), table4, "And ");
#line 20
 testRunner.When("User retrevies data from DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "Country",
                        "PropertyNumber",
                        "PropertyName",
                        "AddressLine1",
                        "AddressLine2",
                        "Postcode",
                        "Town",
                        "County"});
            table5.AddRow(new string[] {
                        "3",
                        "Flat",
                        "United Kingdom",
                        "100",
                        "Gasstation Apartment",
                        "Lewis Cubit Square",
                        "King Cross",
                        "N1C",
                        "London",
                        "Greater London"});
#line 21
 testRunner.Then("the results should be same as", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Add, update and view Property")]
        [Xunit.TraitAttribute("Description", "Update non exisitng property")]
        public virtual void UpdateNonExisitngProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update non exisitng property", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "Country",
                        "PropertyNumber",
                        "PropertyName",
                        "AddressLine1",
                        "AddressLine2",
                        "Postcode",
                        "Town",
                        "County"});
            table6.AddRow(new string[] {
                        "3",
                        "Flat",
                        "United Kingdom",
                        "1",
                        "Beautifull Flat",
                        "Lewis Cubit Square",
                        "King Cross",
                        "N1C",
                        "London",
                        "Greater London"});
#line 26
 testRunner.Given("Property existing in DB", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "Country",
                        "PropertyNumber",
                        "PropertyName",
                        "AddressLine1",
                        "AddressLine2",
                        "Postcode",
                        "Town",
                        "County"});
            table7.AddRow(new string[] {
                        "-4",
                        "Flat",
                        "United Kingdom",
                        "1000",
                        "Apartment",
                        "Baker Street",
                        "",
                        "W2W",
                        "Liverpool",
                        ""});
#line 29
  testRunner.And("Users updates property which is not existing in DB", ((string)(null)), table7, "And ");
#line 32
 testRunner.When("User retrevies data from DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("Property should not be updated in DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
  testRunner.And("HTTP 404 Not found should be received by user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AddUpdateAndViewPropertyFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AddUpdateAndViewPropertyFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
