// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace KnightFrank.Antares.Api.IntegrationTests.Tests.Contacts
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ContactsControllerTestsFeature : Xunit.IClassFixture<ContactsControllerTestsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ContactsControllerTests.feature"
#line hidden
        
        public ContactsControllerTestsFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Contacts Controller tests", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(ContactsControllerTestsFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Contacts Controller tests")]
        [Xunit.TraitAttribute("Description", "Retrieve all contacts details")]
        [Xunit.TraitAttribute("Category", "Contacts")]
        public virtual void RetrieveAllContactsDetails()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve all contacts details", new string[] {
                        "Contacts"});
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given("All contacts have been deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "Surname",
                        "Title"});
            table1.AddRow(new string[] {
                        "Tomasz",
                        "Bien",
                        "Mister"});
            table1.AddRow(new string[] {
                        "David",
                        "Dummy",
                        "Mister"});
#line 6
 testRunner.When("User creates a contact with following data", ((string)(null)), table1, "When ");
#line 10
 testRunner.When("User retrieves all contact details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.Then("User should get OK http status code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
  testRunner.And("contact details should be the same as already added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Contacts Controller tests")]
        [Xunit.TraitAttribute("Description", "Retrieve error messages for improper contact id")]
        [Xunit.TraitAttribute("Category", "Contacts")]
        [Xunit.InlineDataAttribute("00000000-0000-0000-0000-000000000000", "NotFound", new string[0])]
        [Xunit.InlineDataAttribute("A", "BadRequest", new string[0])]
        public virtual void RetrieveErrorMessagesForImproperContactId(string id, string statusCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Contacts"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve error messages for improper contact id", @__tags);
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
  testRunner.When(string.Format("User retrieves contacts details for {0} id", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
  testRunner.Then(string.Format("User should get {0} http status code", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Contacts Controller tests")]
        [Xunit.TraitAttribute("Description", "Create new contact")]
        [Xunit.TraitAttribute("Category", "Contacts")]
        public virtual void CreateNewContact()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new contact", new string[] {
                        "Contacts"});
#line 25
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "Surname",
                        "Title"});
            table2.AddRow(new string[] {
                        "Michael",
                        "Angel",
                        "cheef"});
#line 26
 testRunner.When("User creates a contact with following data", ((string)(null)), table2, "When ");
#line 29
  testRunner.When("User retrieves contacts details for latest id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
  testRunner.Then("User should get OK http status code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
  testRunner.And("contact details should be the same as already added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Contacts Controller tests")]
        [Xunit.TraitAttribute("Description", "Check if validation is invoked")]
        [Xunit.TraitAttribute("Category", "Contacts")]
        [Xunit.InlineDataAttribute("", "Angel", "cheef", new string[0])]
        [Xunit.InlineDataAttribute("Michael", "", "cheef", new string[0])]
        [Xunit.InlineDataAttribute("Michael", "Angel", "", new string[0])]
        public virtual void CheckIfValidationIsInvoked(string firstName, string surname, string title, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Contacts"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check if validation is invoked", @__tags);
#line 34
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "Surname",
                        "Title"});
            table3.AddRow(new string[] {
                        string.Format("{0}", firstName),
                        string.Format("{0}", surname),
                        string.Format("{0}", title)});
#line 35
 testRunner.When("Try to creates a contact with following data", ((string)(null)), table3, "When ");
#line 38
  testRunner.Then("User should get BadRequest http status code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ContactsControllerTestsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ContactsControllerTestsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
