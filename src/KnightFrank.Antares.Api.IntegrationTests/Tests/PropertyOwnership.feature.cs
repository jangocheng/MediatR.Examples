// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace KnightFrank.Antares.Api.IntegrationTests.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PropertyOwnershipFeature : Xunit.IClassFixture<PropertyOwnershipFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PropertyOwnership.feature"
#line hidden
        
        public PropertyOwnershipFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Property ownership", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(PropertyOwnershipFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Property ownership")]
        [Xunit.TraitAttribute("Description", "Save ownership where dates are not overlapping")]
        public virtual void SaveOwnershipWhereDatesAreNotOverlapping()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save ownership where dates are not overlapping", new string[] {
                        "ignore"});
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given("Property exist in DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "Purchasing date",
                        "Selling date",
                        "Name"});
            table1.AddRow(new string[] {
                        "1",
                        "Freehold",
                        "01-05-2010",
                        "01-04-2012",
                        "Jon Snow"});
#line 6
  testRunner.And("property has already ownership", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "Purchasing date",
                        "Selling date",
                        "Name"});
            table2.AddRow(new string[] {
                        "2",
                        "Freehold",
                        "01-05-2012",
                        "01-07-2015",
                        "Sarah Conor"});
#line 9
  testRunner.When("User update the property", ((string)(null)), table2, "When ");
#line 12
 testRunner.Then("HTTP 200 OK should be received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 13
  testRunner.And("Entry should be added to DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Property ownership")]
        [Xunit.TraitAttribute("Description", "Save ownership where dates are overlapping")]
        public virtual void SaveOwnershipWhereDatesAreOverlapping()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save ownership where dates are overlapping", ((string[])(null)));
#line 15
this.ScenarioSetup(scenarioInfo);
#line 16
 testRunner.Given("Property exist in DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "Purchasing date",
                        "Selling date",
                        "Name"});
            table3.AddRow(new string[] {
                        "1",
                        "Freehold",
                        "01-05-2010",
                        "01-04-2012",
                        "Jon Snow"});
#line 17
  testRunner.And("has ownership", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "Purchasing date",
                        "Selling date",
                        "Name"});
            table4.AddRow(new string[] {
                        "2",
                        "Freehold",
                        "01-01-2012",
                        "01-07-2015",
                        "Sarah Conor"});
#line 20
 testRunner.When("User update the property", ((string)(null)), table4, "When ");
#line 23
 testRunner.Then("HTTP 403 Frobidden should be received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Property ownership")]
        [Xunit.TraitAttribute("Description", "Get property ownership list for existing property and ownership with no entry")]
        public virtual void GetPropertyOwnershipListForExistingPropertyAndOwnershipWithNoEntry()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get property ownership list for existing property and ownership with no entry", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("Property exist in DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
  testRunner.But("property has not any ownership", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line 28
 testRunner.When("User send GET request to view property details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("ownership from DB should be visible as empty list on property details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Property ownership")]
        [Xunit.TraitAttribute("Description", "Get property ownership list for existing property and ownership with one entry")]
        public virtual void GetPropertyOwnershipListForExistingPropertyAndOwnershipWithOneEntry()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get property ownership list for existing property and ownership with one entry", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("Property exist in DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "Purchasing date",
                        "Selling date",
                        "Name"});
            table5.AddRow(new string[] {
                        "1",
                        "Freehold",
                        "01-05-2010",
                        "01-04-2012",
                        "Jon Snow"});
#line 33
  testRunner.And("property has already ownership", ((string)(null)), table5, "And ");
#line 36
 testRunner.When("User send GET request to view property details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.Then("ownership from DB should be visible as list on property details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Property ownership")]
        [Xunit.TraitAttribute("Description", "Get property ownership list for existing property and ownership with more than 2 " +
            "entry")]
        public virtual void GetPropertyOwnershipListForExistingPropertyAndOwnershipWithMoreThan2Entry()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get property ownership list for existing property and ownership with more than 2 " +
                    "entry", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("Property exist in DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Type",
                        "Purchasing date",
                        "Selling date",
                        "Name"});
            table6.AddRow(new string[] {
                        "1",
                        "Freehold",
                        "01-05-2010",
                        "01-04-2012",
                        "Jon Snow"});
            table6.AddRow(new string[] {
                        "2",
                        "Freehold",
                        "01-07-1990",
                        "01-12-1998",
                        "Bruce Willice"});
            table6.AddRow(new string[] {
                        "3",
                        "Freehold",
                        "04-04-2001",
                        "24-04-2003",
                        "Frodo Baggins"});
            table6.AddRow(new string[] {
                        "4",
                        "Freehold",
                        "13-11-2004",
                        "29-02-2008",
                        "Bruce Wayne"});
#line 41
  testRunner.And("property has already ownership", ((string)(null)), table6, "And ");
#line 47
 testRunner.When("User send GET request to view property details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
 testRunner.Then("ownership from DB should be visible as list on property details page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Property ownership")]
        [Xunit.TraitAttribute("Description", "Get property ownership list for non existing property")]
        public virtual void GetPropertyOwnershipListForNonExistingProperty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get property ownership list for non existing property", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given("Property with id=10 not exist in DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
 testRunner.When("User send GET request for ownership list for property with id=10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
 testRunner.Then("HTTP 404 Not found should be received by user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Property ownership")]
        [Xunit.TraitAttribute("Description", "Get property ownership details for non existing ownership")]
        public virtual void GetPropertyOwnershipDetailsForNonExistingOwnership()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get property ownership details for non existing ownership", ((string[])(null)));
#line 55
this.ScenarioSetup(scenarioInfo);
#line 56
 testRunner.Given("contect with id=10 not exist in DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
 testRunner.When("Users send GET request for ownership with id=10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then("HTTP 404 Not found should be received by user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PropertyOwnershipFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PropertyOwnershipFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
