// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace KnightFrank.Antares.Api.IntegrationTests.Tests.AddressForm
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AddressFormFeature : Xunit.IClassFixture<AddressFormFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AddressForm.feature"
#line hidden
        
        public AddressFormFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AddressForm", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(AddressFormFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "AddressForm")]
        [Xunit.TraitAttribute("Description", "Retrieve error messages for improper EntityType and CountryCode")]
        [Xunit.TraitAttribute("Category", "AddressForm")]
        [Xunit.InlineDataAttribute("Property", "", "BadRequest", new string[0])]
        [Xunit.InlineDataAttribute("", "", "BadRequest", new string[0])]
        [Xunit.InlineDataAttribute("", "PL", "BadRequest", new string[0])]
        [Xunit.InlineDataAttribute("bla", "PL", "NotFound", new string[0])]
        [Xunit.InlineDataAttribute("Residential", "bla", "NotFound", new string[0])]
        [Xunit.InlineDataAttribute("bla", "bla", "NotFound", new string[0])]
        public virtual void RetrieveErrorMessagesForImproperEntityTypeAndCountryCode(string entityType, string countryCode, string statusCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "AddressForm"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Retrieve error messages for improper EntityType and CountryCode", @__tags);
#line 4
 this.ScenarioSetup(scenarioInfo);
#line 5
  testRunner.Given("Country code PL is present in DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
  testRunner.When(string.Format("User retrieves address template for {0} entity type and {1} contry code", entityType, countryCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 7
  testRunner.Then(string.Format("User should get {0} http status code", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "AddressForm")]
        [Xunit.TraitAttribute("Description", "Get proper address template for GB")]
        [Xunit.TraitAttribute("Category", "AddressForm")]
        public virtual void GetProperAddressTemplateForGB()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get proper address template for GB", new string[] {
                        "AddressForm"});
#line 20
 this.ScenarioSetup(scenarioInfo);
#line 21
  testRunner.When("User retrieves address template for Property entity type and UK contry code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
  testRunner.Then("User should get OK http status code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AddressFormFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AddressFormFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
