// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace KnightFrank.Antares.Api.IntegrationTests.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ResidentialSalesRequirementsFeature : Xunit.IClassFixture<ResidentialSalesRequirementsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ResidentialSalesRequirement.feature"
#line hidden
        
        public ResidentialSalesRequirementsFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Residential sales requirements", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(ResidentialSalesRequirementsFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Residential sales requirements")]
        [Xunit.TraitAttribute("Description", "Save requirement to DB with contact and all detailed fields fullfiled")]
        public virtual void SaveRequirementToDBWithContactAndAllDetailedFieldsFullfiled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save requirement to DB with contact and all detailed fields fullfiled", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "Surname",
                        "Title"});
            table1.AddRow(new string[] {
                        "Tomasz",
                        "Bien",
                        "Mister"});
#line 4
 testRunner.When("User creates a contact with following data", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "MinPrice",
                        "MaxPrice",
                        "MinBedrooms",
                        "MaxBedrooms",
                        "MinReceprionRooms",
                        "MaxReceprionRooms",
                        "MinBathrooms",
                        "MaxBathrooms",
                        "MinParkingSpaces",
                        "MaxParkingSpaces",
                        "MinArea",
                        "MaxArea",
                        "MinLandArea",
                        "MaxLandArea",
                        "Description"});
            table2.AddRow(new string[] {
                        "1000000",
                        "4000000",
                        "1",
                        "5",
                        "0",
                        "2",
                        "1",
                        "3",
                        "1",
                        "2",
                        "1200",
                        "2000",
                        "10000",
                        "20000",
                        "RequirementDescription"});
#line 7
 testRunner.When("User creates following requirement", ((string)(null)), table2, "When ");
#line 10
  testRunner.And("User retrieves requirement that he saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.Then("User should get OK http status code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 12
  testRunner.And("Requirement should be the same as added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Residential sales requirements")]
        [Xunit.TraitAttribute("Description", "Negative - Try save requirement to DB without contact and all detailed fields ful" +
            "lfiled")]
        public virtual void Negative_TrySaveRequirementToDBWithoutContactAndAllDetailedFieldsFullfiled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative - Try save requirement to DB without contact and all detailed fields ful" +
                    "lfiled", new string[] {
                        "ignore"});
#line 15
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "MinPrice",
                        "MaxPrice",
                        "MinBedrooms",
                        "MaxBedrooms",
                        "MinReceprionRooms",
                        "MaxReceprionRooms",
                        "MinBathrooms",
                        "MaxBathrooms",
                        "MinParkingSpaces",
                        "MaxParkingSpaces",
                        "MinArea",
                        "MaxArea",
                        "MinLandArea",
                        "MaxLandArea",
                        "Description"});
            table3.AddRow(new string[] {
                        "1000000",
                        "4000000",
                        "1",
                        "5",
                        "0",
                        "2",
                        "1",
                        "3",
                        "1",
                        "2",
                        "1200",
                        "2000",
                        "10000",
                        "20000",
                        "RequirementDescription"});
#line 16
 testRunner.Given("Details of requirement are provided", ((string)(null)), table3, "Given ");
#line 19
 testRunner.When("user retreive the data from DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.Then("requirement should not be saved in DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 21
  testRunner.And("error message should be displayed - ask dev", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Residential sales requirements")]
        [Xunit.TraitAttribute("Description", "Save requirements with location and all valid fields")]
        public virtual void SaveRequirementsWithLocationAndAllValidFields()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save requirements with location and all valid fields", new string[] {
                        "ignore"});
#line 24
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Street name",
                        "Postcode",
                        "Town"});
            table4.AddRow(new string[] {
                        "Marsh Rd",
                        "HA5 5NQ",
                        "London"});
#line 25
 testRunner.Given("user fills all fields for property location", ((string)(null)), table4, "Given ");
#line 28
 testRunner.When("user retreive the data form DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("requirment should be save in DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Street name",
                        "Postcode",
                        "Town"});
            table5.AddRow(new string[] {
                        "Marsh Rd",
                        "HA5 5NQ",
                        "London"});
#line 30
  testRunner.And("should be same as", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Residential sales requirements")]
        [Xunit.TraitAttribute("Description", "Negative - try save requirement with location without contact field")]
        public virtual void Negative_TrySaveRequirementWithLocationWithoutContactField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative - try save requirement with location without contact field", new string[] {
                        "ignore"});
#line 35
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Street name",
                        "Postcode",
                        "Town"});
            table6.AddRow(new string[] {
                        "Marsh Rd",
                        "HA5 5NQ",
                        "London"});
#line 36
 testRunner.Given("user fills all fields for property location", ((string)(null)), table6, "Given ");
#line 39
  testRunner.But("applicant is not chosen from contact list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line 40
 testRunner.When("user retreive the data from DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 41
 testRunner.Then("requirement should not be saved to the DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 42
  testRunner.And("error message should be displayed - ask dev", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ResidentialSalesRequirementsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ResidentialSalesRequirementsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
