// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace KnightFrank.Antares.Api.IntegrationTests.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class NoteOnResidentialSalesRequirementFeature : Xunit.IClassFixture<NoteOnResidentialSalesRequirementFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "NoteOnResidentialSalesRequirement.feature"
#line hidden
        
        public NoteOnResidentialSalesRequirementFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Note on residential sales requirement", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(NoteOnResidentialSalesRequirementFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(Skip="Ignored")]
        [Xunit.TraitAttribute("FeatureTitle", "Note on residential sales requirement")]
        [Xunit.TraitAttribute("Description", "Save note to residential sales requirement")]
        public virtual void SaveNoteToResidentialSalesRequirement()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save note to residential sales requirement", new string[] {
                        "ignore"});
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "NoteId",
                        "NoteDescription"});
            table1.AddRow(new string[] {
                        "1",
                        "TestNote"});
#line 5
 testRunner.Given("User fill text box in note form for residential sales requirement", ((string)(null)), table1, "Given ");
#line 8
 testRunner.When("User retreive data from DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "NoteId",
                        "NoteDescription"});
            table2.AddRow(new string[] {
                        "1",
                        "TestNote"});
#line 9
 testRunner.Then("the note should be ssame as", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Note on residential sales requirement")]
        [Xunit.TraitAttribute("Description", "Save note to non existing residential sales requirement")]
        public virtual void SaveNoteToNonExistingResidentialSalesRequirement()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save note to non existing residential sales requirement", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "NoteId",
                        "NoteDescription"});
            table3.AddRow(new string[] {
                        "2",
                        "TestNote 2"});
#line 14
 testRunner.Given("User fill text box in note form for residential sales requirement", ((string)(null)), table3, "Given ");
#line 17
  testRunner.And("this requirement is not exist in DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.When("User retreive data from DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 19
 testRunner.Then("the note should not be saved in DB due to mising requirement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 20
  testRunner.And("error message should be displayed ? - ask dev how they check error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Note on residential sales requirement")]
        [Xunit.TraitAttribute("Description", "Get list of all notes from DB for specific residential sales requirement")]
        public virtual void GetListOfAllNotesFromDBForSpecificResidentialSalesRequirement()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get list of all notes from DB for specific residential sales requirement", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "NoteId",
                        "NoteDescription"});
            table4.AddRow(new string[] {
                        "1",
                        "TestNote"});
            table4.AddRow(new string[] {
                        "2",
                        "TestNote 2"});
            table4.AddRow(new string[] {
                        "3",
                        "TestNote 3"});
#line 23
 testRunner.Given("At least 3 notes exist in DB for chosen requirement", ((string)(null)), table4, "Given ");
#line 28
 testRunner.When("User retreive data from DB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "NoteId",
                        "NoteDescription"});
            table5.AddRow(new string[] {
                        "1",
                        "TestNote"});
            table5.AddRow(new string[] {
                        "2",
                        "TestNote 2"});
            table5.AddRow(new string[] {
                        "3",
                        "TestNote 3"});
#line 29
 testRunner.Then("Note list should be same as", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                NoteOnResidentialSalesRequirementFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                NoteOnResidentialSalesRequirementFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
