// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace KnightFrank.Antares.UITests.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ResidentialSalesRequirementUITestsFeature : Xunit.IClassFixture<ResidentialSalesRequirementUITestsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ResidentialSalesRequirement.feature"
#line hidden
        
        public ResidentialSalesRequirementUITestsFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Residential Sales Requirement UI tests", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(ResidentialSalesRequirementUITestsFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Residential Sales Requirement UI tests")]
        [Xunit.TraitAttribute("Description", "Create new residential sales requirement")]
        public virtual void CreateNewResidentialSalesRequirement()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new residential sales requirement", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("User navigates to create contact page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "FirstName",
                        "Surname"});
            table1.AddRow(new string[] {
                        "Miss",
                        "Alana",
                        "Jones"});
#line 5
 testRunner.When("User fills in contact details on create contact page", ((string)(null)), table1, "When ");
#line 8
  testRunner.And("User clicks save button on create contact page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.Then("New contact should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 10
 testRunner.When("User navigates to create residential sales requirement page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "Surname"});
            table2.AddRow(new string[] {
                        "Alana",
                        "Jones"});
#line 11
  testRunner.And("User selects contacts on create residential sales requirement page", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "Surname"});
            table3.AddRow(new string[] {
                        "Alana",
                        "Jones"});
#line 14
  testRunner.And("User selects contacts on create residential sales requirement page", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "Surname"});
            table4.AddRow(new string[] {
                        "Alana",
                        "Jones"});
#line 17
 testRunner.Then("list of applicants should contain following contacts", ((string)(null)), table4, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Country",
                        "PropertyName",
                        "PropertyNumber",
                        "Line1",
                        "Line2",
                        "Line3",
                        "Postcode",
                        "City",
                        "County"});
            table5.AddRow(new string[] {
                        "United Kingdom",
                        "",
                        "",
                        "",
                        "Upper Ground",
                        "",
                        "SE1 9PP",
                        "London",
                        ""});
#line 20
 testRunner.When("User fills in location details on create residential sales requirement page", ((string)(null)), table5, "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "MinPrice",
                        "MaxPrice",
                        "MinBedrooms",
                        "MaxBedrooms",
                        "MinReceptionRooms",
                        "MaxReceptionRooms",
                        "MinBathrooms",
                        "MaxBathrooms",
                        "MinParkingSpaces",
                        "MaxParkingSpaces",
                        "MinArea",
                        "MaxArea",
                        "MinLandArea",
                        "MaxLandArea",
                        "Description"});
            table6.AddRow(new string[] {
                        "Flat",
                        "100000",
                        "500000",
                        "2",
                        "3",
                        "2",
                        "4",
                        "1",
                        "3",
                        "2",
                        "2",
                        "90000",
                        "150000",
                        "200000",
                        "300000",
                        "Note"});
#line 23
  testRunner.And("User fills in property details on create residential sales requirement page", ((string)(null)), table6, "And ");
#line 26
  testRunner.And("User clicks save button on create residential sales requirement page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.Then("New residential sales requirement should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ResidentialSalesRequirementUITestsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ResidentialSalesRequirementUITestsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
